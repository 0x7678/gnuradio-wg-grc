#!/usr/bin/env python3
import os, sys, platform
import locale, gettext
import logging, logging.handlers

#from grcqt.companion import main
from companion import grc
from companion import properties
from companion import helpers

LEVELS = {'--debug': logging.DEBUG,
          '--info': logging.INFO,
          '--warning': logging.WARNING,
          '--error': logging.ERROR,
          '--critical': logging.CRITICAL}

'''
Script that launches the GNU Radio Companion application. This should handle
the logging, translation and main QT setup.
'''
if __name__ == "__main__":

    ''' Logging Support '''
    # Initialize logging first so that it can be used immediately
    # Get logging level (Default to WARNING)
    if len(sys.argv) > 1:
        level_name = sys.argv[1]
        level = LEVELS.get(level_name, logging.WARNING)
    else:
        level = logging.WARNING
    # Note: All children loggers must have the correct naming convention to share handlers
    #  i.e. 'grc.<module-name>'
    logger = logging.getLogger('grc')

    # Still catch everything
    logger.setLevel(logging.DEBUG)

    # Setup the console logging with the given level
    console = logging.StreamHandler()
    console.setLevel(level)

    # Add console formatting
    format = '[%(asctime)s - %(levelname)8s] --- %(message)s (%(filename)s:%(lineno)s)'
    date_format = '%I:%M'
    #formatter = logging.Formatter(format, datefmt = date_format)
    formatter = helpers.log.ConsoleFormatter()
    console.setFormatter(formatter)
    logger.addHandler(console)


    ''' Global Settings/Constants '''
    gp = properties.Properties(sys.argv, __file__)


    ''' Translation Support '''
    # Try to get the current locale. Always add English
    lc, encoding = locale.getdefaultlocale()
    if (lc):
        languages = [lc]
    languages += gp.DEFAULT_LANGUAGE
    logger.debug("Using locale - %s" % str(languages))

    # Still run even if the english translation isn't found
    language = gettext.translation(gp.APP_NAME, gp.path.LANGUAGE, languages=languages, fallback=True)
    if (type(language) == gettext.NullTranslations):
        logger.error("Unable to find any translation")
        logger.error("Default English translation missing")
    else:
        logger.info("Using translation - %s" % language.info()["language"])
    # Still need to install null translation to let the system handle calls to _()
    language.install()


    ''' SYSTEM PROPERTIES '''
    # Figure out system specific properties and setup defaults.
    # Some properties should be overriddable by preferences
    # Get the current OS
    if (platform.system() == "Linux"):
        logger.debug("Detected Linux")
        gp.system.OS = "Linux"
        # Deteremine if Unity is running....
        try:
            #current_desktop = os.environ['DESKTOP_SESSION']
            current_desktop = os.environ['XDG_CURRENT_DESKTOP']
            logger.debug("Desktop Session - %s" % current_desktop)
            if (current_desktop == "Unity"):
                logger.debug("Detected GRC is running under unity")
                # Use the native menubar rather than leaving it in the window
                gp.window.NATIVE_MENUBAR = True
        except:
            logger.error("Unable to determine the Linux desktop system")

    elif (platform.system() == "Darwin"):
        logger.debug("Detected Mac OS X")
        gp.system.OS = "OS X"
        # Setup Mac specific QT elements
        gp.window.NATIVE_MENUBAR = True
    elif (platform.system() == "Windows"):
        gp.system.OS = "Windows"
        logger.warning("Detected Windows")
    else:
        logger.warning("Unknown operating system")


    ''' Preferences '''


    ''' GNU Radio '''
    # Load gnuradio framework
    try:
        from gnuradio import gr
    except ImportError as e:
        logger.error('Unable to import GR framework')

    # Initialize the GUI
    controller = grc.AppController(gp)
    # Launch the app
    #sys.exit(0)
    sys.exit(controller.run())
