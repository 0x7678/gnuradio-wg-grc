#!/usr/bin/env python3
import os, sys
import locale, gettext
import logging, logging.handlers

#from grcqt.companion import main
from companion import grc


# Global constants
APP_NAME = "grc"
INSTALL_DIR = os.path.abspath(os.path.dirname(__file__))
RESOURCES_DIR = os.path.join(INSTALL_DIR, 'companion/resources')
DEFAULT_LANGUAGE = ['en_US']

LEVELS = {'--debug': logging.DEBUG,
          '--info': logging.INFO,
          '--warning': logging.WARNING,
          '--error': logging.ERROR,
          '--critical': logging.CRITICAL}

sys.path.append(os.path.dirname(__file__))

'''
Script that launches the GNU Radio Companion application. This should handle
the logging, translation and main QT setup.
'''
if __name__ == "__main__":

    ### Logging Support ###
    # Get logging level (Default to WARNING)
    if len(sys.argv) > 1:
        level_name = sys.argv[1]
        level = LEVELS.get(level_name, logging.WARNING)
    else:
        level = logging.WARNING
    # Note: All children loggers must have the correct naming convention to share handlers
    #  i.e. 'grc.<module-name>'
    logger = logging.getLogger('grc')

    # Still catch everything
    logger.setLevel(logging.DEBUG)

    # Setup the console logging with the given level
    console = logging.StreamHandler()
    console.setLevel(level)

    # Add console formatting
    #format ='%(asctime)s %(message)s'
    format = '%(asctime)s - %(name)s {%(levelname)s}\t- %(message)s'
    #date_format = '%m/%d/%Y %I:%M:%S %p'
    date_format = '%m/%d/%Y %I:%M'
    formatter = logging.Formatter(format, datefmt=date_format)
    #formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console.setFormatter(formatter)
    logger.addHandler(console)


    ### Path Information ###
    logger.debug("APP_NAME - %s" % APP_NAME)
    logger.debug("INSTALL_DIR - %s" % INSTALL_DIR)
    logger.debug("RESOURCES_DIR - %s" % RESOURCES_DIR)


    ### Translation Support ###
    # Try to get the current locale. Always add English
    lc, encoding = locale.getdefaultlocale()
    if (lc):
        languages = [lc]
    languages += DEFAULT_LANGUAGE
    logger.debug("Using locale - %s" % str(languages))

    # Still run even if the english translation isn't found
    LANGUAGE_DIR = os.path.join(RESOURCES_DIR, 'language')
    logger.debug("LANGUAGE_DIR - %s" % LANGUAGE_DIR)
    language = gettext.translation(APP_NAME, LANGUAGE_DIR, languages=languages, fallback=True)
    if (type(language) == gettext.NullTranslations):
        logger.error("Unable to find any translation")
        logger.error("Default English translation missing")
    else:
        logger.info("Using translation - %s" % language.info()["language"])
    # Still need to install null translation to let the system handle calls to _()
    language.install()


    ### Preferences ###


    ### GNU Radio ###
    # Load gnuradio framework
    try:
        from gnuradio import gr
    except ImportError as e:
        logger.error('Unable to import GR framework')

    # Initialize the GUI
    controller = grc.AppController(sys.argv, INSTALL_DIR)
    # Launch the app
    sys.exit(controller.run())
